// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spark/connect/commands.proto

package org.apache.spark.connect.proto;

public interface StreamingQueryManagerCommandOrBuilder extends
    // @@protoc_insertion_point(interface_extends:spark.connect.StreamingQueryManagerCommand)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * active() API, returns a list of active queries.
   * </pre>
   *
   * <code>bool active = 1;</code>
   * @return Whether the active field is set.
   */
  boolean hasActive();
  /**
   * <pre>
   * active() API, returns a list of active queries.
   * </pre>
   *
   * <code>bool active = 1;</code>
   * @return The active.
   */
  boolean getActive();

  /**
   * <pre>
   * get() API, returns the StreamingQuery identified by id.
   * </pre>
   *
   * <code>string get_query = 2;</code>
   * @return Whether the getQuery field is set.
   */
  boolean hasGetQuery();
  /**
   * <pre>
   * get() API, returns the StreamingQuery identified by id.
   * </pre>
   *
   * <code>string get_query = 2;</code>
   * @return The getQuery.
   */
  java.lang.String getGetQuery();
  /**
   * <pre>
   * get() API, returns the StreamingQuery identified by id.
   * </pre>
   *
   * <code>string get_query = 2;</code>
   * @return The bytes for getQuery.
   */
  com.google.protobuf.ByteString
      getGetQueryBytes();

  /**
   * <pre>
   * awaitAnyTermination() API, wait until any query terminates or timeout.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryManagerCommand.AwaitAnyTerminationCommand await_any_termination = 3;</code>
   * @return Whether the awaitAnyTermination field is set.
   */
  boolean hasAwaitAnyTermination();
  /**
   * <pre>
   * awaitAnyTermination() API, wait until any query terminates or timeout.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryManagerCommand.AwaitAnyTerminationCommand await_any_termination = 3;</code>
   * @return The awaitAnyTermination.
   */
  org.apache.spark.connect.proto.StreamingQueryManagerCommand.AwaitAnyTerminationCommand getAwaitAnyTermination();
  /**
   * <pre>
   * awaitAnyTermination() API, wait until any query terminates or timeout.
   * </pre>
   *
   * <code>.spark.connect.StreamingQueryManagerCommand.AwaitAnyTerminationCommand await_any_termination = 3;</code>
   */
  org.apache.spark.connect.proto.StreamingQueryManagerCommand.AwaitAnyTerminationCommandOrBuilder getAwaitAnyTerminationOrBuilder();

  /**
   * <pre>
   * resetTerminated() API.
   * </pre>
   *
   * <code>bool reset_terminated = 4;</code>
   * @return Whether the resetTerminated field is set.
   */
  boolean hasResetTerminated();
  /**
   * <pre>
   * resetTerminated() API.
   * </pre>
   *
   * <code>bool reset_terminated = 4;</code>
   * @return The resetTerminated.
   */
  boolean getResetTerminated();

  org.apache.spark.connect.proto.StreamingQueryManagerCommand.CommandCase getCommandCase();
}
